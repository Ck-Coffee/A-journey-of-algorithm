 /**
  * 问题:在 O(n log n) 时间复杂度和常数级的空间复杂度下给链表排序。
  * 例:给出 1->3->2->null，给它排序变成 1->2->3->null.
  * 
  * 思路:1.利用归并排序，将链表分成小链表（利用快慢指针）
  *      2.合并排序后的链表 
  * /
public class Solution {
    /**
     * @param head: The head of linked list.
     * @return: You should return the head of the sorted linked list, using constant space complexity.
     */
    public ListNode sortList(ListNode head) {
        // write your code here
        if(head == null || head.next == null){
            return head;
        }
        ListNode fast =head,slow = head,temp = head;
        while(fast != null && fast.next != null){
            temp = slow;
            slow = slow.next;
            fast = fast.next.next;
        }
        temp.next = null;
        return mergeList(sortList(head),sortList(slow));
    }
    
    public ListNode mergeList(ListNode head1,ListNode head2){
        if(head1 == null){
            return head2;
        }
        if(head2 == null){
            return head1;
        }
        ListNode hpoint = new ListNode(0);
        ListNode temp = hpoint;
        while(head1 != null && head2 != null){
            if(head1.val < head2.val){
                temp.next = head1;
                head1 = head1.next;
            }else{
                temp.next = head2;
                head2 = head2.next;
            }
            temp = temp.next;
        }
        if(head1 != null){
            temp.next = head1;
        }else if(head2 != null){
            temp.next = head2;
        }
        
        return hpoint.next;
    }
}